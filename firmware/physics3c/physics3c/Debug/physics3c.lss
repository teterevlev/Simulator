
physics3c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000d00  00000d94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800110  00800110  00000da4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bee  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000865  00000000  00000000  00001ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000068e  00000000  00000000  00002317  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  000029a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057e  00000000  00000000  00002bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f8  00000000  00000000  0000313a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003532  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 32       	cpi	r26, 0x25	; 37
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ed 02 	call	0x5da	; 0x5da <main>
  9e:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z9uart_initv>:
#define F_CPU 16000000UL
#define BAUD 115200
#include <util/setbaud.h>
#include "functions.h"
void uart_init(void) {
	UBRR0H = UBRRH_VALUE;
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
  aa:	80 e1       	ldi	r24, 0x10	; 16
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	#if USE_2X
	UCSR0A |= _BV(U2X0);
  b0:	e0 ec       	ldi	r30, 0xC0	; 192
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	80 83       	st	Z, r24
	#else
	UCSR0A &= ~(_BV(U2X0));
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  c6:	08 95       	ret

000000c8 <_Z12uart_putcharh>:
}
void uart_putchar(uint8_t c) {
	loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
  c8:	e0 ec       	ldi	r30, 0xC0	; 192
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	90 81       	ld	r25, Z
  ce:	95 ff       	sbrs	r25, 5
  d0:	fd cf       	rjmp	.-6      	; 0xcc <_Z12uart_putcharh+0x4>
	UDR0 = c;
  d2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  d6:	08 95       	ret

000000d8 <_Z14uart_availablev>:
}
bool uart_available(){
	if ( !(UCSR0A & (1<<RXC0)) ) return false;
  d8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	return true;
}
  dc:	88 1f       	adc	r24, r24
  de:	88 27       	eor	r24, r24
  e0:	88 1f       	adc	r24, r24
  e2:	08 95       	ret

000000e4 <_Z12uart_getcharv>:
uint8_t uart_getchar(){
	return UDR0;
  e4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  e8:	08 95       	ret

000000ea <_Z8uart_decl>:
void uart_dec(int32_t d){
  ea:	8f 92       	push	r8
  ec:	9f 92       	push	r9
  ee:	af 92       	push	r10
  f0:	bf 92       	push	r11
  f2:	cf 92       	push	r12
  f4:	df 92       	push	r13
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	6b 01       	movw	r12, r22
  fc:	7c 01       	movw	r14, r24
	if(d<0){
  fe:	99 23       	and	r25, r25
 100:	5c f4       	brge	.+22     	; 0x118 <_Z8uart_decl+0x2e>
		uart_putchar('-');
 102:	8d e2       	ldi	r24, 0x2D	; 45
 104:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12uart_putcharh>
		d = -d;
 108:	f0 94       	com	r15
 10a:	e0 94       	com	r14
 10c:	d0 94       	com	r13
 10e:	c0 94       	com	r12
 110:	c1 1c       	adc	r12, r1
 112:	d1 1c       	adc	r13, r1
 114:	e1 1c       	adc	r14, r1
 116:	f1 1c       	adc	r15, r1
	}
	if(d>=10000) uart_putchar((d/10000)+48);
 118:	80 e1       	ldi	r24, 0x10	; 16
 11a:	c8 16       	cp	r12, r24
 11c:	87 e2       	ldi	r24, 0x27	; 39
 11e:	d8 06       	cpc	r13, r24
 120:	e1 04       	cpc	r14, r1
 122:	f1 04       	cpc	r15, r1
 124:	64 f0       	brlt	.+24     	; 0x13e <_Z8uart_decl+0x54>
 126:	c7 01       	movw	r24, r14
 128:	b6 01       	movw	r22, r12
 12a:	20 e1       	ldi	r18, 0x10	; 16
 12c:	37 e2       	ldi	r19, 0x27	; 39
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divmodsi4>
 136:	80 e3       	ldi	r24, 0x30	; 48
 138:	82 0f       	add	r24, r18
 13a:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12uart_putcharh>
	if(d>=1000) uart_putchar(((d/1000)%10)+48);
 13e:	88 ee       	ldi	r24, 0xE8	; 232
 140:	c8 16       	cp	r12, r24
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	d8 06       	cpc	r13, r24
 146:	e1 04       	cpc	r14, r1
 148:	f1 04       	cpc	r15, r1
 14a:	a4 f0       	brlt	.+40     	; 0x174 <_Z8uart_decl+0x8a>
 14c:	c7 01       	movw	r24, r14
 14e:	b6 01       	movw	r22, r12
 150:	28 ee       	ldi	r18, 0xE8	; 232
 152:	33 e0       	ldi	r19, 0x03	; 3
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divmodsi4>
 15c:	ca 01       	movw	r24, r20
 15e:	b9 01       	movw	r22, r18
 160:	2a e0       	ldi	r18, 0x0A	; 10
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divmodsi4>
 16c:	80 e3       	ldi	r24, 0x30	; 48
 16e:	86 0f       	add	r24, r22
 170:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12uart_putcharh>
	if(d>=100) uart_putchar(((d/100)%10)+48);
 174:	84 e6       	ldi	r24, 0x64	; 100
 176:	c8 16       	cp	r12, r24
 178:	d1 04       	cpc	r13, r1
 17a:	e1 04       	cpc	r14, r1
 17c:	f1 04       	cpc	r15, r1
 17e:	a4 f0       	brlt	.+40     	; 0x1a8 <_Z8uart_decl+0xbe>
 180:	c7 01       	movw	r24, r14
 182:	b6 01       	movw	r22, r12
 184:	24 e6       	ldi	r18, 0x64	; 100
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	50 e0       	ldi	r21, 0x00	; 0
 18c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divmodsi4>
 190:	ca 01       	movw	r24, r20
 192:	b9 01       	movw	r22, r18
 194:	2a e0       	ldi	r18, 0x0A	; 10
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divmodsi4>
 1a0:	80 e3       	ldi	r24, 0x30	; 48
 1a2:	86 0f       	add	r24, r22
 1a4:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12uart_putcharh>
	if(d>=10) uart_putchar(((d/10)%10)+48);
 1a8:	8a e0       	ldi	r24, 0x0A	; 10
 1aa:	c8 16       	cp	r12, r24
 1ac:	d1 04       	cpc	r13, r1
 1ae:	e1 04       	cpc	r14, r1
 1b0:	f1 04       	cpc	r15, r1
 1b2:	bc f0       	brlt	.+46     	; 0x1e2 <_Z8uart_decl+0xf8>
 1b4:	0f 2e       	mov	r0, r31
 1b6:	fa e0       	ldi	r31, 0x0A	; 10
 1b8:	8f 2e       	mov	r8, r31
 1ba:	91 2c       	mov	r9, r1
 1bc:	a1 2c       	mov	r10, r1
 1be:	b1 2c       	mov	r11, r1
 1c0:	f0 2d       	mov	r31, r0
 1c2:	c7 01       	movw	r24, r14
 1c4:	b6 01       	movw	r22, r12
 1c6:	a5 01       	movw	r20, r10
 1c8:	94 01       	movw	r18, r8
 1ca:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divmodsi4>
 1ce:	ca 01       	movw	r24, r20
 1d0:	b9 01       	movw	r22, r18
 1d2:	a5 01       	movw	r20, r10
 1d4:	94 01       	movw	r18, r8
 1d6:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divmodsi4>
 1da:	80 e3       	ldi	r24, 0x30	; 48
 1dc:	86 0f       	add	r24, r22
 1de:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12uart_putcharh>
	uart_putchar((d%10)+48);
 1e2:	c7 01       	movw	r24, r14
 1e4:	b6 01       	movw	r22, r12
 1e6:	2a e0       	ldi	r18, 0x0A	; 10
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	40 e0       	ldi	r20, 0x00	; 0
 1ec:	50 e0       	ldi	r21, 0x00	; 0
 1ee:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divmodsi4>
 1f2:	80 e3       	ldi	r24, 0x30	; 48
 1f4:	86 0f       	add	r24, r22
 1f6:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12uart_putcharh>
}
 1fa:	ff 90       	pop	r15
 1fc:	ef 90       	pop	r14
 1fe:	df 90       	pop	r13
 200:	cf 90       	pop	r12
 202:	bf 90       	pop	r11
 204:	af 90       	pop	r10
 206:	9f 90       	pop	r9
 208:	8f 90       	pop	r8
 20a:	08 95       	ret

0000020c <_Z5timerhhh>:
void timer(uint8_t id, uint8_t prescale, uint8_t ocr){
	// TCCR0B=0x03: 16 - 2040 us
	// TCCR0B=0x04: 64 - 8200 us
	// TCCR0B=0x05: 256 - 32600 us
	if(id==0){
 20c:	81 11       	cpse	r24, r1
 20e:	03 c0       	rjmp	.+6      	; 0x216 <_Z5timerhhh+0xa>
		TCCR0B=prescale;
 210:	65 bd       	out	0x25, r22	; 37
		OCR0A = ocr;
 212:	47 bd       	out	0x27, r20	; 39
 214:	08 95       	ret
	}else if(id==1){
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	41 f4       	brne	.+16     	; 0x22a <_Z5timerhhh+0x1e>
		TCCR1B=prescale;
 21a:	60 93 81 00 	sts	0x0081, r22	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		OCR1A = ocr;
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 224:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 228:	08 95       	ret
	}else if(id==3){
 22a:	83 30       	cpi	r24, 0x03	; 3
 22c:	21 f4       	brne	.+8      	; 0x236 <_Z5timerhhh+0x2a>
		TCCR2B=prescale;
 22e:	60 93 b1 00 	sts	0x00B1, r22	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
		OCR2A = ocr;
 232:	40 93 b3 00 	sts	0x00B3, r20	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 236:	08 95       	ret

00000238 <_Z5drivehf>:
	}
}
void drive(uint8_t id, float period){
 238:	cf 92       	push	r12
 23a:	df 92       	push	r13
 23c:	ef 92       	push	r14
 23e:	ff 92       	push	r15
 240:	cf 93       	push	r28
 242:	c8 2f       	mov	r28, r24
 244:	6a 01       	movw	r12, r20
 246:	7b 01       	movw	r14, r22
	if(period<2048){
 248:	20 e0       	ldi	r18, 0x00	; 0
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	40 e0       	ldi	r20, 0x00	; 0
 24e:	55 e4       	ldi	r21, 0x45	; 69
 250:	c7 01       	movw	r24, r14
 252:	b6 01       	movw	r22, r12
 254:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__cmpsf2>
 258:	88 23       	and	r24, r24
 25a:	b4 f4       	brge	.+44     	; 0x288 <_Z5drivehf+0x50>
		timer(id, 0x03, period*256/2048);
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	40 e8       	ldi	r20, 0x80	; 128
 262:	53 e4       	ldi	r21, 0x43	; 67
 264:	c7 01       	movw	r24, r14
 266:	b6 01       	movw	r22, r12
 268:	0e 94 d0 05 	call	0xba0	; 0xba0 <__mulsf3>
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	5a e3       	ldi	r21, 0x3A	; 58
 274:	0e 94 d0 05 	call	0xba0	; 0xba0 <__mulsf3>
 278:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__fixunssfsi>
 27c:	46 2f       	mov	r20, r22
 27e:	63 e0       	ldi	r22, 0x03	; 3
 280:	8c 2f       	mov	r24, r28
 282:	0e 94 06 01 	call	0x20c	; 0x20c <_Z5timerhhh>
 286:	3f c0       	rjmp	.+126    	; 0x306 <_Z5drivehf+0xce>
	}else if(period<8192){
 288:	20 e0       	ldi	r18, 0x00	; 0
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	56 e4       	ldi	r21, 0x46	; 70
 290:	c7 01       	movw	r24, r14
 292:	b6 01       	movw	r22, r12
 294:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__cmpsf2>
 298:	88 23       	and	r24, r24
 29a:	b4 f4       	brge	.+44     	; 0x2c8 <_Z5drivehf+0x90>
		timer(id, 0x04, period*256/8192);
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	40 e8       	ldi	r20, 0x80	; 128
 2a2:	53 e4       	ldi	r21, 0x43	; 67
 2a4:	c7 01       	movw	r24, r14
 2a6:	b6 01       	movw	r22, r12
 2a8:	0e 94 d0 05 	call	0xba0	; 0xba0 <__mulsf3>
 2ac:	20 e0       	ldi	r18, 0x00	; 0
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	59 e3       	ldi	r21, 0x39	; 57
 2b4:	0e 94 d0 05 	call	0xba0	; 0xba0 <__mulsf3>
 2b8:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__fixunssfsi>
 2bc:	46 2f       	mov	r20, r22
 2be:	64 e0       	ldi	r22, 0x04	; 4
 2c0:	8c 2f       	mov	r24, r28
 2c2:	0e 94 06 01 	call	0x20c	; 0x20c <_Z5timerhhh>
 2c6:	1f c0       	rjmp	.+62     	; 0x306 <_Z5drivehf+0xce>
	}else if(period<32768){
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	57 e4       	ldi	r21, 0x47	; 71
 2d0:	c7 01       	movw	r24, r14
 2d2:	b6 01       	movw	r22, r12
 2d4:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__cmpsf2>
 2d8:	88 23       	and	r24, r24
 2da:	ac f4       	brge	.+42     	; 0x306 <_Z5drivehf+0xce>
		timer(id, 0x05, period*256/32768);
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	40 e8       	ldi	r20, 0x80	; 128
 2e2:	53 e4       	ldi	r21, 0x43	; 67
 2e4:	c7 01       	movw	r24, r14
 2e6:	b6 01       	movw	r22, r12
 2e8:	0e 94 d0 05 	call	0xba0	; 0xba0 <__mulsf3>
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	40 e0       	ldi	r20, 0x00	; 0
 2f2:	58 e3       	ldi	r21, 0x38	; 56
 2f4:	0e 94 d0 05 	call	0xba0	; 0xba0 <__mulsf3>
 2f8:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__fixunssfsi>
 2fc:	46 2f       	mov	r20, r22
 2fe:	65 e0       	ldi	r22, 0x05	; 5
 300:	8c 2f       	mov	r24, r28
 302:	0e 94 06 01 	call	0x20c	; 0x20c <_Z5timerhhh>
	}
}
 306:	cf 91       	pop	r28
 308:	ff 90       	pop	r15
 30a:	ef 90       	pop	r14
 30c:	df 90       	pop	r13
 30e:	cf 90       	pop	r12
 310:	08 95       	ret

00000312 <_Z9gpio_initv>:
void gpio_init(){
	TCCR0A=0x42;
 312:	82 e4       	ldi	r24, 0x42	; 66
 314:	84 bd       	out	0x24, r24	; 36
	TCCR0B=0x05;
 316:	95 e0       	ldi	r25, 0x05	; 5
 318:	95 bd       	out	0x25, r25	; 37
	TCNT0=0x00;
 31a:	16 bc       	out	0x26, r1	; 38
	OCR0A=255;
 31c:	9f ef       	ldi	r25, 0xFF	; 255
 31e:	97 bd       	out	0x27, r25	; 39
	OCR0B=0x00;
 320:	18 bc       	out	0x28, r1	; 40
		
		
	TCCR1A=0x40;
 322:	90 e4       	ldi	r25, 0x40	; 64
 324:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B=0x09;
 328:	99 e0       	ldi	r25, 0x09	; 9
 32a:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCNT1H=0x00;
 32e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L=0x00;
 332:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	ICR1H=0x00;
 336:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
	ICR1L=0x00;
 33a:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1AH=0x00;
 33e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL=110;
 342:	9e e6       	ldi	r25, 0x6E	; 110
 344:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1BH=0x00;
 348:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	OCR1BL=0x00;
 34c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		
		
	ASSR=0x00;
 350:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	TCCR2A=0x42;
 354:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B=0x01;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	TCNT2=0x00;
 35e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	OCR2A=120;
 362:	88 e7       	ldi	r24, 0x78	; 120
 364:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B=0x00;
 368:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		
	TIMSK0=0x02;
 36c:	82 e0       	ldi	r24, 0x02	; 2
 36e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	TIMSK1=0x02;
 372:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TIMSK2=0x02;
 376:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	ACSR=0x80;
 37a:	80 e8       	ldi	r24, 0x80	; 128
 37c:	80 bf       	out	0x30, r24	; 48
 37e:	08 95       	ret

00000380 <_Z14interrupt_initv>:
}
void interrupt_init(){
	PORTB=0x00;
 380:	15 b8       	out	0x05, r1	; 5
	DDRB=0b11010;
 382:	8a e1       	ldi	r24, 0x1A	; 26
 384:	84 b9       	out	0x04, r24	; 4

	PORTC=0x00;
 386:	18 b8       	out	0x08, r1	; 8
	DDRC=0x00;
 388:	17 b8       	out	0x07, r1	; 7

	PORTD=0x00;
 38a:	1b b8       	out	0x0b, r1	; 11
	DDRD=0x40;
 38c:	80 e4       	ldi	r24, 0x40	; 64
 38e:	8a b9       	out	0x0a, r24	; 10
 390:	08 95       	ret

00000392 <_Z10checkSpeedv>:
float acceleration = 0;
float maxSpeed = 20;
float maxAcceleration = 1;
float requestFrequency = .01;

void checkSpeed(){
 392:	cf 92       	push	r12
 394:	df 92       	push	r13
 396:	ef 92       	push	r14
 398:	ff 92       	push	r15
	if(speed > maxSpeed) speed = maxSpeed;
 39a:	c0 90 08 01 	lds	r12, 0x0108	; 0x800108 <maxSpeed>
 39e:	d0 90 09 01 	lds	r13, 0x0109	; 0x800109 <maxSpeed+0x1>
 3a2:	e0 90 0a 01 	lds	r14, 0x010A	; 0x80010a <maxSpeed+0x2>
 3a6:	f0 90 0b 01 	lds	r15, 0x010B	; 0x80010b <maxSpeed+0x3>
 3aa:	a7 01       	movw	r20, r14
 3ac:	96 01       	movw	r18, r12
 3ae:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <speed>
 3b2:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <speed+0x1>
 3b6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <speed+0x2>
 3ba:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <speed+0x3>
 3be:	0e 94 cb 05 	call	0xb96	; 0xb96 <__gesf2>
 3c2:	18 16       	cp	r1, r24
 3c4:	44 f4       	brge	.+16     	; 0x3d6 <_Z10checkSpeedv+0x44>
 3c6:	c0 92 19 01 	sts	0x0119, r12	; 0x800119 <speed>
 3ca:	d0 92 1a 01 	sts	0x011A, r13	; 0x80011a <speed+0x1>
 3ce:	e0 92 1b 01 	sts	0x011B, r14	; 0x80011b <speed+0x2>
 3d2:	f0 92 1c 01 	sts	0x011C, r15	; 0x80011c <speed+0x3>
}
 3d6:	ff 90       	pop	r15
 3d8:	ef 90       	pop	r14
 3da:	df 90       	pop	r13
 3dc:	cf 90       	pop	r12
 3de:	08 95       	ret

000003e0 <_Z8setCoordv>:
int32_t c=0;
void setCoord(){
 3e0:	cf 92       	push	r12
 3e2:	df 92       	push	r13
 3e4:	ef 92       	push	r14
 3e6:	ff 92       	push	r15
	float newSpeed = requestFrequency*(targetCoord-coord);
 3e8:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <coord>
 3ec:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <coord+0x1>
 3f0:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <coord+0x2>
 3f4:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <coord+0x3>
 3f8:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <targetCoord>
 3fc:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <targetCoord+0x1>
 400:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <targetCoord+0x2>
 404:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <targetCoord+0x3>
 408:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__subsf3>
 40c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 410:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 414:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
 418:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
 41c:	0e 94 d0 05 	call	0xba0	; 0xba0 <__mulsf3>
	acceleration = newSpeed-speed;
 420:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <speed>
 424:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <speed+0x1>
 428:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <speed+0x2>
 42c:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <speed+0x3>
 430:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__subsf3>
 434:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <acceleration>
 438:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <acceleration+0x1>
 43c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <acceleration+0x2>
 440:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <acceleration+0x3>
	if(acceleration>maxAcceleration) acceleration = maxAcceleration;
 444:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <maxAcceleration>
 448:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <maxAcceleration+0x1>
 44c:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <maxAcceleration+0x2>
 450:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <maxAcceleration+0x3>
 454:	a7 01       	movw	r20, r14
 456:	96 01       	movw	r18, r12
 458:	0e 94 cb 05 	call	0xb96	; 0xb96 <__gesf2>
 45c:	18 16       	cp	r1, r24
 45e:	44 f4       	brge	.+16     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 460:	c0 92 15 01 	sts	0x0115, r12	; 0x800115 <acceleration>
 464:	d0 92 16 01 	sts	0x0116, r13	; 0x800116 <acceleration+0x1>
 468:	e0 92 17 01 	sts	0x0117, r14	; 0x800117 <acceleration+0x2>
 46c:	f0 92 18 01 	sts	0x0118, r15	; 0x800118 <acceleration+0x3>
	
}
 470:	ff 90       	pop	r15
 472:	ef 90       	pop	r14
 474:	df 90       	pop	r13
 476:	cf 90       	pop	r12
 478:	08 95       	ret

0000047a <_Z11readUartDecv>:
void readUartDec(){
 47a:	0f 93       	push	r16
 47c:	1f 93       	push	r17
	static bool minus;
	if(uart_available()){
 47e:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z14uart_availablev>
 482:	88 23       	and	r24, r24
 484:	09 f4       	brne	.+2      	; 0x488 <_Z11readUartDecv+0xe>
 486:	a6 c0       	rjmp	.+332    	; 0x5d4 <_Z11readUartDecv+0x15a>
		
		int8_t u = uart_getchar();
 488:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z12uart_getcharv>
 48c:	48 2f       	mov	r20, r24
		if(u=='\n'){
 48e:	8a 30       	cpi	r24, 0x0A	; 10
 490:	09 f0       	breq	.+2      	; 0x494 <_Z11readUartDecv+0x1a>
 492:	4e c0       	rjmp	.+156    	; 0x530 <_Z11readUartDecv+0xb6>
			if(minus)
 494:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 498:	88 23       	and	r24, r24
 49a:	e1 f0       	breq	.+56     	; 0x4d4 <_Z11readUartDecv+0x5a>
				targetCoord = -c;
 49c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <c>
 4a0:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <c+0x1>
 4a4:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <c+0x2>
 4a8:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <c+0x3>
 4ac:	9c 01       	movw	r18, r24
 4ae:	ad 01       	movw	r20, r26
 4b0:	66 27       	eor	r22, r22
 4b2:	77 27       	eor	r23, r23
 4b4:	cb 01       	movw	r24, r22
 4b6:	62 1b       	sub	r22, r18
 4b8:	73 0b       	sbc	r23, r19
 4ba:	84 0b       	sbc	r24, r20
 4bc:	95 0b       	sbc	r25, r21
 4be:	0e 94 1b 05 	call	0xa36	; 0xa36 <__floatsisf>
 4c2:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <targetCoord>
 4c6:	70 93 22 01 	sts	0x0122, r23	; 0x800122 <targetCoord+0x1>
 4ca:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <targetCoord+0x2>
 4ce:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <targetCoord+0x3>
 4d2:	12 c0       	rjmp	.+36     	; 0x4f8 <_Z11readUartDecv+0x7e>
			else
				targetCoord = c;
 4d4:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <c>
 4d8:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <c+0x1>
 4dc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <c+0x2>
 4e0:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <c+0x3>
 4e4:	0e 94 1b 05 	call	0xa36	; 0xa36 <__floatsisf>
 4e8:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <targetCoord>
 4ec:	70 93 22 01 	sts	0x0122, r23	; 0x800122 <targetCoord+0x1>
 4f0:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <targetCoord+0x2>
 4f4:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <targetCoord+0x3>
				
			setCoord();
 4f8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z8setCoordv>
			//drive(0, targetCoord);
			uart_dec(targetCoord);
 4fc:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <targetCoord>
 500:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <targetCoord+0x1>
 504:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <targetCoord+0x2>
 508:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <targetCoord+0x3>
 50c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
 510:	0e 94 75 00 	call	0xea	; 0xea <_Z8uart_decl>
			uart_putchar('\n');
 514:	8a e0       	ldi	r24, 0x0A	; 10
 516:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12uart_putcharh>
			c = 0;
 51a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <c>
 51e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <c+0x1>
 522:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <c+0x2>
 526:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <c+0x3>
			minus = false;
 52a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 52e:	52 c0       	rjmp	.+164    	; 0x5d4 <_Z11readUartDecv+0x15a>
		}else if(u=='-'){
 530:	8d 32       	cpi	r24, 0x2D	; 45
 532:	61 f4       	brne	.+24     	; 0x54c <_Z11readUartDecv+0xd2>
			c = 0;
 534:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <c>
 538:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <c+0x1>
 53c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <c+0x2>
 540:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <c+0x3>
			minus = true;
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 54a:	44 c0       	rjmp	.+136    	; 0x5d4 <_Z11readUartDecv+0x15a>
		}else{
			if(c==0){
 54c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <c>
 550:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <c+0x1>
 554:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <c+0x2>
 558:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <c+0x3>
 55c:	00 97       	sbiw	r24, 0x00	; 0
 55e:	a1 05       	cpc	r26, r1
 560:	b1 05       	cpc	r27, r1
 562:	89 f4       	brne	.+34     	; 0x586 <_Z11readUartDecv+0x10c>
				c = u-48;
 564:	84 2f       	mov	r24, r20
 566:	44 0f       	add	r20, r20
 568:	99 0b       	sbc	r25, r25
 56a:	c0 97       	sbiw	r24, 0x30	; 48
 56c:	09 2e       	mov	r0, r25
 56e:	00 0c       	add	r0, r0
 570:	aa 0b       	sbc	r26, r26
 572:	bb 0b       	sbc	r27, r27
 574:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <c>
 578:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <c+0x1>
 57c:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <c+0x2>
 580:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <c+0x3>
 584:	27 c0       	rjmp	.+78     	; 0x5d4 <_Z11readUartDecv+0x15a>
			}else{
				c *= 10;
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	aa 1f       	adc	r26, r26
 58c:	bb 1f       	adc	r27, r27
 58e:	8c 01       	movw	r16, r24
 590:	9d 01       	movw	r18, r26
 592:	00 0f       	add	r16, r16
 594:	11 1f       	adc	r17, r17
 596:	22 1f       	adc	r18, r18
 598:	33 1f       	adc	r19, r19
 59a:	00 0f       	add	r16, r16
 59c:	11 1f       	adc	r17, r17
 59e:	22 1f       	adc	r18, r18
 5a0:	33 1f       	adc	r19, r19
 5a2:	80 0f       	add	r24, r16
 5a4:	91 1f       	adc	r25, r17
 5a6:	a2 1f       	adc	r26, r18
 5a8:	b3 1f       	adc	r27, r19
				c += u-48;
 5aa:	04 2e       	mov	r0, r20
 5ac:	00 0c       	add	r0, r0
 5ae:	55 0b       	sbc	r21, r21
 5b0:	40 53       	subi	r20, 0x30	; 48
 5b2:	51 09       	sbc	r21, r1
 5b4:	05 2e       	mov	r0, r21
 5b6:	00 0c       	add	r0, r0
 5b8:	66 0b       	sbc	r22, r22
 5ba:	77 0b       	sbc	r23, r23
 5bc:	84 0f       	add	r24, r20
 5be:	95 1f       	adc	r25, r21
 5c0:	a6 1f       	adc	r26, r22
 5c2:	b7 1f       	adc	r27, r23
 5c4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <c>
 5c8:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <c+0x1>
 5cc:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <c+0x2>
 5d0:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <c+0x3>
			}
		}
		
	}
}
 5d4:	1f 91       	pop	r17
 5d6:	0f 91       	pop	r16
 5d8:	08 95       	ret

000005da <main>:
int main(void)
{
	gpio_init();
 5da:	0e 94 89 01 	call	0x312	; 0x312 <_Z9gpio_initv>
	interrupt_init();
 5de:	0e 94 c0 01 	call	0x380	; 0x380 <_Z14interrupt_initv>
	uart_init();
 5e2:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z9uart_initv>
	asm("sei");
 5e6:	78 94       	sei
    while (1) 
    {
		readUartDec();
 5e8:	0e 94 3d 02 	call	0x47a	; 0x47a <_Z11readUartDecv>
			}
		}
		
	}
}
int main(void)
 5ec:	fd cf       	rjmp	.-6      	; 0x5e8 <main+0xe>

000005ee <__vector_14>:
    {
		readUartDec();
    }
}

ISR(TIMER0_COMPA_vect){
 5ee:	1f 92       	push	r1
 5f0:	0f 92       	push	r0
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	0f 92       	push	r0
 5f6:	11 24       	eor	r1, r1
 5f8:	cf 92       	push	r12
 5fa:	df 92       	push	r13
 5fc:	ef 92       	push	r14
 5fe:	ff 92       	push	r15
 600:	2f 93       	push	r18
 602:	3f 93       	push	r19
 604:	4f 93       	push	r20
 606:	5f 93       	push	r21
 608:	6f 93       	push	r22
 60a:	7f 93       	push	r23
 60c:	8f 93       	push	r24
 60e:	9f 93       	push	r25
 610:	af 93       	push	r26
 612:	bf 93       	push	r27
 614:	ef 93       	push	r30
 616:	ff 93       	push	r31
	if(PIND & 0b01000000){
 618:	4e 9b       	sbis	0x09, 6	; 9
 61a:	54 c0       	rjmp	.+168    	; 0x6c4 <__vector_14+0xd6>
		speed += acceleration;
 61c:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <acceleration>
 620:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <acceleration+0x1>
 624:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <acceleration+0x2>
 628:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <acceleration+0x3>
 62c:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <speed>
 630:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <speed+0x1>
 634:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <speed+0x2>
 638:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <speed+0x3>
 63c:	0e 94 00 04 	call	0x800	; 0x800 <__addsf3>
 640:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <speed>
 644:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <speed+0x1>
 648:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <speed+0x2>
 64c:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <speed+0x3>
		checkSpeed();
 650:	0e 94 c9 01 	call	0x392	; 0x392 <_Z10checkSpeedv>
		period = 20000./speed;
 654:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <speed>
 658:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <speed+0x1>
 65c:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <speed+0x2>
 660:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <speed+0x3>
 664:	60 e0       	ldi	r22, 0x00	; 0
 666:	70 e4       	ldi	r23, 0x40	; 64
 668:	8c e9       	ldi	r24, 0x9C	; 156
 66a:	96 e4       	ldi	r25, 0x46	; 70
 66c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__divsf3>
 670:	6b 01       	movw	r12, r22
 672:	7c 01       	movw	r14, r24
		if(period<0) period = -period;
 674:	20 e0       	ldi	r18, 0x00	; 0
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	a9 01       	movw	r20, r18
 67a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__cmpsf2>
 67e:	88 23       	and	r24, r24
 680:	4c f0       	brlt	.+18     	; 0x694 <__vector_14+0xa6>

ISR(TIMER0_COMPA_vect){
	if(PIND & 0b01000000){
		speed += acceleration;
		checkSpeed();
		period = 20000./speed;
 682:	c0 92 0c 01 	sts	0x010C, r12	; 0x80010c <period>
 686:	d0 92 0d 01 	sts	0x010D, r13	; 0x80010d <period+0x1>
 68a:	e0 92 0e 01 	sts	0x010E, r14	; 0x80010e <period+0x2>
 68e:	f0 92 0f 01 	sts	0x010F, r15	; 0x80010f <period+0x3>
 692:	0c c0       	rjmp	.+24     	; 0x6ac <__vector_14+0xbe>
		if(period<0) period = -period;
 694:	f7 fa       	bst	r15, 7
 696:	f0 94       	com	r15
 698:	f7 f8       	bld	r15, 7
 69a:	f0 94       	com	r15
 69c:	c0 92 0c 01 	sts	0x010C, r12	; 0x80010c <period>
 6a0:	d0 92 0d 01 	sts	0x010D, r13	; 0x80010d <period+0x1>
 6a4:	e0 92 0e 01 	sts	0x010E, r14	; 0x80010e <period+0x2>
 6a8:	f0 92 0f 01 	sts	0x010F, r15	; 0x80010f <period+0x3>
		drive(0, period);
 6ac:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <period>
 6b0:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <period+0x1>
 6b4:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <period+0x2>
 6b8:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <period+0x3>
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	0e 94 1c 01 	call	0x238	; 0x238 <_Z5drivehf>
 6c2:	74 c0       	rjmp	.+232    	; 0x7ac <__vector_14+0x1be>
	}else{
		if(speed > 0){
 6c4:	c0 90 19 01 	lds	r12, 0x0119	; 0x800119 <speed>
 6c8:	d0 90 1a 01 	lds	r13, 0x011A	; 0x80011a <speed+0x1>
 6cc:	e0 90 1b 01 	lds	r14, 0x011B	; 0x80011b <speed+0x2>
 6d0:	f0 90 1c 01 	lds	r15, 0x011C	; 0x80011c <speed+0x3>
 6d4:	20 e0       	ldi	r18, 0x00	; 0
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	a9 01       	movw	r20, r18
 6da:	c7 01       	movw	r24, r14
 6dc:	b6 01       	movw	r22, r12
 6de:	0e 94 cb 05 	call	0xb96	; 0xb96 <__gesf2>
 6e2:	18 16       	cp	r1, r24
 6e4:	0c f0       	brlt	.+2      	; 0x6e8 <__vector_14+0xfa>
 6e6:	62 c0       	rjmp	.+196    	; 0x7ac <__vector_14+0x1be>
			coord++;
 6e8:	20 e0       	ldi	r18, 0x00	; 0
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	40 e8       	ldi	r20, 0x80	; 128
 6ee:	5f e3       	ldi	r21, 0x3F	; 63
 6f0:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <coord>
 6f4:	70 91 1e 01 	lds	r23, 0x011E	; 0x80011e <coord+0x1>
 6f8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <coord+0x2>
 6fc:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <coord+0x3>
 700:	0e 94 00 04 	call	0x800	; 0x800 <__addsf3>
 704:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <coord>
 708:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <coord+0x1>
 70c:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <coord+0x2>
 710:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <coord+0x3>
			if(coord > targetCoord){
 714:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <targetCoord>
 718:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <targetCoord+0x1>
 71c:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <targetCoord+0x2>
 720:	50 91 24 01 	lds	r21, 0x0124	; 0x800124 <targetCoord+0x3>
 724:	0e 94 cb 05 	call	0xb96	; 0xb96 <__gesf2>
 728:	18 16       	cp	r1, r24
 72a:	cc f4       	brge	.+50     	; 0x75e <__vector_14+0x170>
				acceleration = -maxAcceleration/4;
 72c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <maxAcceleration>
 730:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <maxAcceleration+0x1>
 734:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <maxAcceleration+0x2>
 738:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <maxAcceleration+0x3>
 73c:	bc 01       	movw	r22, r24
 73e:	cd 01       	movw	r24, r26
 740:	90 58       	subi	r25, 0x80	; 128
 742:	20 e0       	ldi	r18, 0x00	; 0
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	40 e8       	ldi	r20, 0x80	; 128
 748:	5e e3       	ldi	r21, 0x3E	; 62
 74a:	0e 94 d0 05 	call	0xba0	; 0xba0 <__mulsf3>
 74e:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <acceleration>
 752:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <acceleration+0x1>
 756:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <acceleration+0x2>
 75a:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <acceleration+0x3>
			}
		}else return;
		uart_dec(speed);
 75e:	c7 01       	movw	r24, r14
 760:	b6 01       	movw	r22, r12
 762:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
 766:	0e 94 75 00 	call	0xea	; 0xea <_Z8uart_decl>
		uart_putchar('\t');
 76a:	89 e0       	ldi	r24, 0x09	; 9
 76c:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12uart_putcharh>
		uart_dec(period);
 770:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <period>
 774:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <period+0x1>
 778:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <period+0x2>
 77c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <period+0x3>
 780:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
 784:	0e 94 75 00 	call	0xea	; 0xea <_Z8uart_decl>
		//uart_putchar('\t');
		//uart_dec(acceleration);
		uart_putchar('\t');
 788:	89 e0       	ldi	r24, 0x09	; 9
 78a:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12uart_putcharh>
		uart_dec(coord);
 78e:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <coord>
 792:	70 91 1e 01 	lds	r23, 0x011E	; 0x80011e <coord+0x1>
 796:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <coord+0x2>
 79a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <coord+0x3>
 79e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
 7a2:	0e 94 75 00 	call	0xea	; 0xea <_Z8uart_decl>
		uart_putchar('\n');
 7a6:	8a e0       	ldi	r24, 0x0A	; 10
 7a8:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12uart_putcharh>
	}
}
 7ac:	ff 91       	pop	r31
 7ae:	ef 91       	pop	r30
 7b0:	bf 91       	pop	r27
 7b2:	af 91       	pop	r26
 7b4:	9f 91       	pop	r25
 7b6:	8f 91       	pop	r24
 7b8:	7f 91       	pop	r23
 7ba:	6f 91       	pop	r22
 7bc:	5f 91       	pop	r21
 7be:	4f 91       	pop	r20
 7c0:	3f 91       	pop	r19
 7c2:	2f 91       	pop	r18
 7c4:	ff 90       	pop	r15
 7c6:	ef 90       	pop	r14
 7c8:	df 90       	pop	r13
 7ca:	cf 90       	pop	r12
 7cc:	0f 90       	pop	r0
 7ce:	0f be       	out	0x3f, r0	; 63
 7d0:	0f 90       	pop	r0
 7d2:	1f 90       	pop	r1
 7d4:	18 95       	reti

000007d6 <__vector_11>:
ISR(TIMER1_COMPA_vect){
 7d6:	1f 92       	push	r1
 7d8:	0f 92       	push	r0
 7da:	0f b6       	in	r0, 0x3f	; 63
 7dc:	0f 92       	push	r0
 7de:	11 24       	eor	r1, r1
	
}
 7e0:	0f 90       	pop	r0
 7e2:	0f be       	out	0x3f, r0	; 63
 7e4:	0f 90       	pop	r0
 7e6:	1f 90       	pop	r1
 7e8:	18 95       	reti

000007ea <__vector_7>:
ISR(TIMER2_COMPA_vect){
 7ea:	1f 92       	push	r1
 7ec:	0f 92       	push	r0
 7ee:	0f b6       	in	r0, 0x3f	; 63
 7f0:	0f 92       	push	r0
 7f2:	11 24       	eor	r1, r1
	
}
 7f4:	0f 90       	pop	r0
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	0f 90       	pop	r0
 7fa:	1f 90       	pop	r1
 7fc:	18 95       	reti

000007fe <__subsf3>:
 7fe:	50 58       	subi	r21, 0x80	; 128

00000800 <__addsf3>:
 800:	bb 27       	eor	r27, r27
 802:	aa 27       	eor	r26, r26
 804:	0e 94 17 04 	call	0x82e	; 0x82e <__addsf3x>
 808:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__fp_round>
 80c:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_pscA>
 810:	38 f0       	brcs	.+14     	; 0x820 <__addsf3+0x20>
 812:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fp_pscB>
 816:	20 f0       	brcs	.+8      	; 0x820 <__addsf3+0x20>
 818:	39 f4       	brne	.+14     	; 0x828 <__addsf3+0x28>
 81a:	9f 3f       	cpi	r25, 0xFF	; 255
 81c:	19 f4       	brne	.+6      	; 0x824 <__addsf3+0x24>
 81e:	26 f4       	brtc	.+8      	; 0x828 <__addsf3+0x28>
 820:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__fp_nan>
 824:	0e f4       	brtc	.+2      	; 0x828 <__addsf3+0x28>
 826:	e0 95       	com	r30
 828:	e7 fb       	bst	r30, 7
 82a:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__fp_inf>

0000082e <__addsf3x>:
 82e:	e9 2f       	mov	r30, r25
 830:	0e 94 a2 05 	call	0xb44	; 0xb44 <__fp_split3>
 834:	58 f3       	brcs	.-42     	; 0x80c <__addsf3+0xc>
 836:	ba 17       	cp	r27, r26
 838:	62 07       	cpc	r22, r18
 83a:	73 07       	cpc	r23, r19
 83c:	84 07       	cpc	r24, r20
 83e:	95 07       	cpc	r25, r21
 840:	20 f0       	brcs	.+8      	; 0x84a <__addsf3x+0x1c>
 842:	79 f4       	brne	.+30     	; 0x862 <__addsf3x+0x34>
 844:	a6 f5       	brtc	.+104    	; 0x8ae <__addsf3x+0x80>
 846:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__fp_zero>
 84a:	0e f4       	brtc	.+2      	; 0x84e <__addsf3x+0x20>
 84c:	e0 95       	com	r30
 84e:	0b 2e       	mov	r0, r27
 850:	ba 2f       	mov	r27, r26
 852:	a0 2d       	mov	r26, r0
 854:	0b 01       	movw	r0, r22
 856:	b9 01       	movw	r22, r18
 858:	90 01       	movw	r18, r0
 85a:	0c 01       	movw	r0, r24
 85c:	ca 01       	movw	r24, r20
 85e:	a0 01       	movw	r20, r0
 860:	11 24       	eor	r1, r1
 862:	ff 27       	eor	r31, r31
 864:	59 1b       	sub	r21, r25
 866:	99 f0       	breq	.+38     	; 0x88e <__addsf3x+0x60>
 868:	59 3f       	cpi	r21, 0xF9	; 249
 86a:	50 f4       	brcc	.+20     	; 0x880 <__addsf3x+0x52>
 86c:	50 3e       	cpi	r21, 0xE0	; 224
 86e:	68 f1       	brcs	.+90     	; 0x8ca <__addsf3x+0x9c>
 870:	1a 16       	cp	r1, r26
 872:	f0 40       	sbci	r31, 0x00	; 0
 874:	a2 2f       	mov	r26, r18
 876:	23 2f       	mov	r18, r19
 878:	34 2f       	mov	r19, r20
 87a:	44 27       	eor	r20, r20
 87c:	58 5f       	subi	r21, 0xF8	; 248
 87e:	f3 cf       	rjmp	.-26     	; 0x866 <__addsf3x+0x38>
 880:	46 95       	lsr	r20
 882:	37 95       	ror	r19
 884:	27 95       	ror	r18
 886:	a7 95       	ror	r26
 888:	f0 40       	sbci	r31, 0x00	; 0
 88a:	53 95       	inc	r21
 88c:	c9 f7       	brne	.-14     	; 0x880 <__addsf3x+0x52>
 88e:	7e f4       	brtc	.+30     	; 0x8ae <__addsf3x+0x80>
 890:	1f 16       	cp	r1, r31
 892:	ba 0b       	sbc	r27, r26
 894:	62 0b       	sbc	r22, r18
 896:	73 0b       	sbc	r23, r19
 898:	84 0b       	sbc	r24, r20
 89a:	ba f0       	brmi	.+46     	; 0x8ca <__addsf3x+0x9c>
 89c:	91 50       	subi	r25, 0x01	; 1
 89e:	a1 f0       	breq	.+40     	; 0x8c8 <__addsf3x+0x9a>
 8a0:	ff 0f       	add	r31, r31
 8a2:	bb 1f       	adc	r27, r27
 8a4:	66 1f       	adc	r22, r22
 8a6:	77 1f       	adc	r23, r23
 8a8:	88 1f       	adc	r24, r24
 8aa:	c2 f7       	brpl	.-16     	; 0x89c <__addsf3x+0x6e>
 8ac:	0e c0       	rjmp	.+28     	; 0x8ca <__addsf3x+0x9c>
 8ae:	ba 0f       	add	r27, r26
 8b0:	62 1f       	adc	r22, r18
 8b2:	73 1f       	adc	r23, r19
 8b4:	84 1f       	adc	r24, r20
 8b6:	48 f4       	brcc	.+18     	; 0x8ca <__addsf3x+0x9c>
 8b8:	87 95       	ror	r24
 8ba:	77 95       	ror	r23
 8bc:	67 95       	ror	r22
 8be:	b7 95       	ror	r27
 8c0:	f7 95       	ror	r31
 8c2:	9e 3f       	cpi	r25, 0xFE	; 254
 8c4:	08 f0       	brcs	.+2      	; 0x8c8 <__addsf3x+0x9a>
 8c6:	b0 cf       	rjmp	.-160    	; 0x828 <__addsf3+0x28>
 8c8:	93 95       	inc	r25
 8ca:	88 0f       	add	r24, r24
 8cc:	08 f0       	brcs	.+2      	; 0x8d0 <__addsf3x+0xa2>
 8ce:	99 27       	eor	r25, r25
 8d0:	ee 0f       	add	r30, r30
 8d2:	97 95       	ror	r25
 8d4:	87 95       	ror	r24
 8d6:	08 95       	ret

000008d8 <__cmpsf2>:
 8d8:	0e 94 56 05 	call	0xaac	; 0xaac <__fp_cmp>
 8dc:	08 f4       	brcc	.+2      	; 0x8e0 <__cmpsf2+0x8>
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	08 95       	ret

000008e2 <__divsf3>:
 8e2:	0e 94 85 04 	call	0x90a	; 0x90a <__divsf3x>
 8e6:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__fp_round>
 8ea:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fp_pscB>
 8ee:	58 f0       	brcs	.+22     	; 0x906 <__stack+0x7>
 8f0:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_pscA>
 8f4:	40 f0       	brcs	.+16     	; 0x906 <__stack+0x7>
 8f6:	29 f4       	brne	.+10     	; 0x902 <__stack+0x3>
 8f8:	5f 3f       	cpi	r21, 0xFF	; 255
 8fa:	29 f0       	breq	.+10     	; 0x906 <__stack+0x7>
 8fc:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__fp_inf>
 900:	51 11       	cpse	r21, r1
 902:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_szero>
 906:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__fp_nan>

0000090a <__divsf3x>:
 90a:	0e 94 a2 05 	call	0xb44	; 0xb44 <__fp_split3>
 90e:	68 f3       	brcs	.-38     	; 0x8ea <__divsf3+0x8>

00000910 <__divsf3_pse>:
 910:	99 23       	and	r25, r25
 912:	b1 f3       	breq	.-20     	; 0x900 <__stack+0x1>
 914:	55 23       	and	r21, r21
 916:	91 f3       	breq	.-28     	; 0x8fc <__divsf3+0x1a>
 918:	95 1b       	sub	r25, r21
 91a:	55 0b       	sbc	r21, r21
 91c:	bb 27       	eor	r27, r27
 91e:	aa 27       	eor	r26, r26
 920:	62 17       	cp	r22, r18
 922:	73 07       	cpc	r23, r19
 924:	84 07       	cpc	r24, r20
 926:	38 f0       	brcs	.+14     	; 0x936 <__divsf3_pse+0x26>
 928:	9f 5f       	subi	r25, 0xFF	; 255
 92a:	5f 4f       	sbci	r21, 0xFF	; 255
 92c:	22 0f       	add	r18, r18
 92e:	33 1f       	adc	r19, r19
 930:	44 1f       	adc	r20, r20
 932:	aa 1f       	adc	r26, r26
 934:	a9 f3       	breq	.-22     	; 0x920 <__divsf3_pse+0x10>
 936:	35 d0       	rcall	.+106    	; 0x9a2 <__divsf3_pse+0x92>
 938:	0e 2e       	mov	r0, r30
 93a:	3a f0       	brmi	.+14     	; 0x94a <__divsf3_pse+0x3a>
 93c:	e0 e8       	ldi	r30, 0x80	; 128
 93e:	32 d0       	rcall	.+100    	; 0x9a4 <__divsf3_pse+0x94>
 940:	91 50       	subi	r25, 0x01	; 1
 942:	50 40       	sbci	r21, 0x00	; 0
 944:	e6 95       	lsr	r30
 946:	00 1c       	adc	r0, r0
 948:	ca f7       	brpl	.-14     	; 0x93c <__divsf3_pse+0x2c>
 94a:	2b d0       	rcall	.+86     	; 0x9a2 <__divsf3_pse+0x92>
 94c:	fe 2f       	mov	r31, r30
 94e:	29 d0       	rcall	.+82     	; 0x9a2 <__divsf3_pse+0x92>
 950:	66 0f       	add	r22, r22
 952:	77 1f       	adc	r23, r23
 954:	88 1f       	adc	r24, r24
 956:	bb 1f       	adc	r27, r27
 958:	26 17       	cp	r18, r22
 95a:	37 07       	cpc	r19, r23
 95c:	48 07       	cpc	r20, r24
 95e:	ab 07       	cpc	r26, r27
 960:	b0 e8       	ldi	r27, 0x80	; 128
 962:	09 f0       	breq	.+2      	; 0x966 <__divsf3_pse+0x56>
 964:	bb 0b       	sbc	r27, r27
 966:	80 2d       	mov	r24, r0
 968:	bf 01       	movw	r22, r30
 96a:	ff 27       	eor	r31, r31
 96c:	93 58       	subi	r25, 0x83	; 131
 96e:	5f 4f       	sbci	r21, 0xFF	; 255
 970:	3a f0       	brmi	.+14     	; 0x980 <__divsf3_pse+0x70>
 972:	9e 3f       	cpi	r25, 0xFE	; 254
 974:	51 05       	cpc	r21, r1
 976:	78 f0       	brcs	.+30     	; 0x996 <__divsf3_pse+0x86>
 978:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__fp_inf>
 97c:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_szero>
 980:	5f 3f       	cpi	r21, 0xFF	; 255
 982:	e4 f3       	brlt	.-8      	; 0x97c <__divsf3_pse+0x6c>
 984:	98 3e       	cpi	r25, 0xE8	; 232
 986:	d4 f3       	brlt	.-12     	; 0x97c <__divsf3_pse+0x6c>
 988:	86 95       	lsr	r24
 98a:	77 95       	ror	r23
 98c:	67 95       	ror	r22
 98e:	b7 95       	ror	r27
 990:	f7 95       	ror	r31
 992:	9f 5f       	subi	r25, 0xFF	; 255
 994:	c9 f7       	brne	.-14     	; 0x988 <__divsf3_pse+0x78>
 996:	88 0f       	add	r24, r24
 998:	91 1d       	adc	r25, r1
 99a:	96 95       	lsr	r25
 99c:	87 95       	ror	r24
 99e:	97 f9       	bld	r25, 7
 9a0:	08 95       	ret
 9a2:	e1 e0       	ldi	r30, 0x01	; 1
 9a4:	66 0f       	add	r22, r22
 9a6:	77 1f       	adc	r23, r23
 9a8:	88 1f       	adc	r24, r24
 9aa:	bb 1f       	adc	r27, r27
 9ac:	62 17       	cp	r22, r18
 9ae:	73 07       	cpc	r23, r19
 9b0:	84 07       	cpc	r24, r20
 9b2:	ba 07       	cpc	r27, r26
 9b4:	20 f0       	brcs	.+8      	; 0x9be <__divsf3_pse+0xae>
 9b6:	62 1b       	sub	r22, r18
 9b8:	73 0b       	sbc	r23, r19
 9ba:	84 0b       	sbc	r24, r20
 9bc:	ba 0b       	sbc	r27, r26
 9be:	ee 1f       	adc	r30, r30
 9c0:	88 f7       	brcc	.-30     	; 0x9a4 <__divsf3_pse+0x94>
 9c2:	e0 95       	com	r30
 9c4:	08 95       	ret

000009c6 <__fixsfsi>:
 9c6:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__fixunssfsi>
 9ca:	68 94       	set
 9cc:	b1 11       	cpse	r27, r1
 9ce:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_szero>
 9d2:	08 95       	ret

000009d4 <__fixunssfsi>:
 9d4:	0e 94 aa 05 	call	0xb54	; 0xb54 <__fp_splitA>
 9d8:	88 f0       	brcs	.+34     	; 0x9fc <__fixunssfsi+0x28>
 9da:	9f 57       	subi	r25, 0x7F	; 127
 9dc:	98 f0       	brcs	.+38     	; 0xa04 <__fixunssfsi+0x30>
 9de:	b9 2f       	mov	r27, r25
 9e0:	99 27       	eor	r25, r25
 9e2:	b7 51       	subi	r27, 0x17	; 23
 9e4:	b0 f0       	brcs	.+44     	; 0xa12 <__fixunssfsi+0x3e>
 9e6:	e1 f0       	breq	.+56     	; 0xa20 <__fixunssfsi+0x4c>
 9e8:	66 0f       	add	r22, r22
 9ea:	77 1f       	adc	r23, r23
 9ec:	88 1f       	adc	r24, r24
 9ee:	99 1f       	adc	r25, r25
 9f0:	1a f0       	brmi	.+6      	; 0x9f8 <__fixunssfsi+0x24>
 9f2:	ba 95       	dec	r27
 9f4:	c9 f7       	brne	.-14     	; 0x9e8 <__fixunssfsi+0x14>
 9f6:	14 c0       	rjmp	.+40     	; 0xa20 <__fixunssfsi+0x4c>
 9f8:	b1 30       	cpi	r27, 0x01	; 1
 9fa:	91 f0       	breq	.+36     	; 0xa20 <__fixunssfsi+0x4c>
 9fc:	0e 94 c4 05 	call	0xb88	; 0xb88 <__fp_zero>
 a00:	b1 e0       	ldi	r27, 0x01	; 1
 a02:	08 95       	ret
 a04:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__fp_zero>
 a08:	67 2f       	mov	r22, r23
 a0a:	78 2f       	mov	r23, r24
 a0c:	88 27       	eor	r24, r24
 a0e:	b8 5f       	subi	r27, 0xF8	; 248
 a10:	39 f0       	breq	.+14     	; 0xa20 <__fixunssfsi+0x4c>
 a12:	b9 3f       	cpi	r27, 0xF9	; 249
 a14:	cc f3       	brlt	.-14     	; 0xa08 <__fixunssfsi+0x34>
 a16:	86 95       	lsr	r24
 a18:	77 95       	ror	r23
 a1a:	67 95       	ror	r22
 a1c:	b3 95       	inc	r27
 a1e:	d9 f7       	brne	.-10     	; 0xa16 <__fixunssfsi+0x42>
 a20:	3e f4       	brtc	.+14     	; 0xa30 <__fixunssfsi+0x5c>
 a22:	90 95       	com	r25
 a24:	80 95       	com	r24
 a26:	70 95       	com	r23
 a28:	61 95       	neg	r22
 a2a:	7f 4f       	sbci	r23, 0xFF	; 255
 a2c:	8f 4f       	sbci	r24, 0xFF	; 255
 a2e:	9f 4f       	sbci	r25, 0xFF	; 255
 a30:	08 95       	ret

00000a32 <__floatunsisf>:
 a32:	e8 94       	clt
 a34:	09 c0       	rjmp	.+18     	; 0xa48 <__floatsisf+0x12>

00000a36 <__floatsisf>:
 a36:	97 fb       	bst	r25, 7
 a38:	3e f4       	brtc	.+14     	; 0xa48 <__floatsisf+0x12>
 a3a:	90 95       	com	r25
 a3c:	80 95       	com	r24
 a3e:	70 95       	com	r23
 a40:	61 95       	neg	r22
 a42:	7f 4f       	sbci	r23, 0xFF	; 255
 a44:	8f 4f       	sbci	r24, 0xFF	; 255
 a46:	9f 4f       	sbci	r25, 0xFF	; 255
 a48:	99 23       	and	r25, r25
 a4a:	a9 f0       	breq	.+42     	; 0xa76 <__floatsisf+0x40>
 a4c:	f9 2f       	mov	r31, r25
 a4e:	96 e9       	ldi	r25, 0x96	; 150
 a50:	bb 27       	eor	r27, r27
 a52:	93 95       	inc	r25
 a54:	f6 95       	lsr	r31
 a56:	87 95       	ror	r24
 a58:	77 95       	ror	r23
 a5a:	67 95       	ror	r22
 a5c:	b7 95       	ror	r27
 a5e:	f1 11       	cpse	r31, r1
 a60:	f8 cf       	rjmp	.-16     	; 0xa52 <__floatsisf+0x1c>
 a62:	fa f4       	brpl	.+62     	; 0xaa2 <__floatsisf+0x6c>
 a64:	bb 0f       	add	r27, r27
 a66:	11 f4       	brne	.+4      	; 0xa6c <__floatsisf+0x36>
 a68:	60 ff       	sbrs	r22, 0
 a6a:	1b c0       	rjmp	.+54     	; 0xaa2 <__floatsisf+0x6c>
 a6c:	6f 5f       	subi	r22, 0xFF	; 255
 a6e:	7f 4f       	sbci	r23, 0xFF	; 255
 a70:	8f 4f       	sbci	r24, 0xFF	; 255
 a72:	9f 4f       	sbci	r25, 0xFF	; 255
 a74:	16 c0       	rjmp	.+44     	; 0xaa2 <__floatsisf+0x6c>
 a76:	88 23       	and	r24, r24
 a78:	11 f0       	breq	.+4      	; 0xa7e <__floatsisf+0x48>
 a7a:	96 e9       	ldi	r25, 0x96	; 150
 a7c:	11 c0       	rjmp	.+34     	; 0xaa0 <__floatsisf+0x6a>
 a7e:	77 23       	and	r23, r23
 a80:	21 f0       	breq	.+8      	; 0xa8a <__floatsisf+0x54>
 a82:	9e e8       	ldi	r25, 0x8E	; 142
 a84:	87 2f       	mov	r24, r23
 a86:	76 2f       	mov	r23, r22
 a88:	05 c0       	rjmp	.+10     	; 0xa94 <__floatsisf+0x5e>
 a8a:	66 23       	and	r22, r22
 a8c:	71 f0       	breq	.+28     	; 0xaaa <__floatsisf+0x74>
 a8e:	96 e8       	ldi	r25, 0x86	; 134
 a90:	86 2f       	mov	r24, r22
 a92:	70 e0       	ldi	r23, 0x00	; 0
 a94:	60 e0       	ldi	r22, 0x00	; 0
 a96:	2a f0       	brmi	.+10     	; 0xaa2 <__floatsisf+0x6c>
 a98:	9a 95       	dec	r25
 a9a:	66 0f       	add	r22, r22
 a9c:	77 1f       	adc	r23, r23
 a9e:	88 1f       	adc	r24, r24
 aa0:	da f7       	brpl	.-10     	; 0xa98 <__floatsisf+0x62>
 aa2:	88 0f       	add	r24, r24
 aa4:	96 95       	lsr	r25
 aa6:	87 95       	ror	r24
 aa8:	97 f9       	bld	r25, 7
 aaa:	08 95       	ret

00000aac <__fp_cmp>:
 aac:	99 0f       	add	r25, r25
 aae:	00 08       	sbc	r0, r0
 ab0:	55 0f       	add	r21, r21
 ab2:	aa 0b       	sbc	r26, r26
 ab4:	e0 e8       	ldi	r30, 0x80	; 128
 ab6:	fe ef       	ldi	r31, 0xFE	; 254
 ab8:	16 16       	cp	r1, r22
 aba:	17 06       	cpc	r1, r23
 abc:	e8 07       	cpc	r30, r24
 abe:	f9 07       	cpc	r31, r25
 ac0:	c0 f0       	brcs	.+48     	; 0xaf2 <__fp_cmp+0x46>
 ac2:	12 16       	cp	r1, r18
 ac4:	13 06       	cpc	r1, r19
 ac6:	e4 07       	cpc	r30, r20
 ac8:	f5 07       	cpc	r31, r21
 aca:	98 f0       	brcs	.+38     	; 0xaf2 <__fp_cmp+0x46>
 acc:	62 1b       	sub	r22, r18
 ace:	73 0b       	sbc	r23, r19
 ad0:	84 0b       	sbc	r24, r20
 ad2:	95 0b       	sbc	r25, r21
 ad4:	39 f4       	brne	.+14     	; 0xae4 <__fp_cmp+0x38>
 ad6:	0a 26       	eor	r0, r26
 ad8:	61 f0       	breq	.+24     	; 0xaf2 <__fp_cmp+0x46>
 ada:	23 2b       	or	r18, r19
 adc:	24 2b       	or	r18, r20
 ade:	25 2b       	or	r18, r21
 ae0:	21 f4       	brne	.+8      	; 0xaea <__fp_cmp+0x3e>
 ae2:	08 95       	ret
 ae4:	0a 26       	eor	r0, r26
 ae6:	09 f4       	brne	.+2      	; 0xaea <__fp_cmp+0x3e>
 ae8:	a1 40       	sbci	r26, 0x01	; 1
 aea:	a6 95       	lsr	r26
 aec:	8f ef       	ldi	r24, 0xFF	; 255
 aee:	81 1d       	adc	r24, r1
 af0:	81 1d       	adc	r24, r1
 af2:	08 95       	ret

00000af4 <__fp_inf>:
 af4:	97 f9       	bld	r25, 7
 af6:	9f 67       	ori	r25, 0x7F	; 127
 af8:	80 e8       	ldi	r24, 0x80	; 128
 afa:	70 e0       	ldi	r23, 0x00	; 0
 afc:	60 e0       	ldi	r22, 0x00	; 0
 afe:	08 95       	ret

00000b00 <__fp_nan>:
 b00:	9f ef       	ldi	r25, 0xFF	; 255
 b02:	80 ec       	ldi	r24, 0xC0	; 192
 b04:	08 95       	ret

00000b06 <__fp_pscA>:
 b06:	00 24       	eor	r0, r0
 b08:	0a 94       	dec	r0
 b0a:	16 16       	cp	r1, r22
 b0c:	17 06       	cpc	r1, r23
 b0e:	18 06       	cpc	r1, r24
 b10:	09 06       	cpc	r0, r25
 b12:	08 95       	ret

00000b14 <__fp_pscB>:
 b14:	00 24       	eor	r0, r0
 b16:	0a 94       	dec	r0
 b18:	12 16       	cp	r1, r18
 b1a:	13 06       	cpc	r1, r19
 b1c:	14 06       	cpc	r1, r20
 b1e:	05 06       	cpc	r0, r21
 b20:	08 95       	ret

00000b22 <__fp_round>:
 b22:	09 2e       	mov	r0, r25
 b24:	03 94       	inc	r0
 b26:	00 0c       	add	r0, r0
 b28:	11 f4       	brne	.+4      	; 0xb2e <__fp_round+0xc>
 b2a:	88 23       	and	r24, r24
 b2c:	52 f0       	brmi	.+20     	; 0xb42 <__fp_round+0x20>
 b2e:	bb 0f       	add	r27, r27
 b30:	40 f4       	brcc	.+16     	; 0xb42 <__fp_round+0x20>
 b32:	bf 2b       	or	r27, r31
 b34:	11 f4       	brne	.+4      	; 0xb3a <__fp_round+0x18>
 b36:	60 ff       	sbrs	r22, 0
 b38:	04 c0       	rjmp	.+8      	; 0xb42 <__fp_round+0x20>
 b3a:	6f 5f       	subi	r22, 0xFF	; 255
 b3c:	7f 4f       	sbci	r23, 0xFF	; 255
 b3e:	8f 4f       	sbci	r24, 0xFF	; 255
 b40:	9f 4f       	sbci	r25, 0xFF	; 255
 b42:	08 95       	ret

00000b44 <__fp_split3>:
 b44:	57 fd       	sbrc	r21, 7
 b46:	90 58       	subi	r25, 0x80	; 128
 b48:	44 0f       	add	r20, r20
 b4a:	55 1f       	adc	r21, r21
 b4c:	59 f0       	breq	.+22     	; 0xb64 <__fp_splitA+0x10>
 b4e:	5f 3f       	cpi	r21, 0xFF	; 255
 b50:	71 f0       	breq	.+28     	; 0xb6e <__fp_splitA+0x1a>
 b52:	47 95       	ror	r20

00000b54 <__fp_splitA>:
 b54:	88 0f       	add	r24, r24
 b56:	97 fb       	bst	r25, 7
 b58:	99 1f       	adc	r25, r25
 b5a:	61 f0       	breq	.+24     	; 0xb74 <__fp_splitA+0x20>
 b5c:	9f 3f       	cpi	r25, 0xFF	; 255
 b5e:	79 f0       	breq	.+30     	; 0xb7e <__fp_splitA+0x2a>
 b60:	87 95       	ror	r24
 b62:	08 95       	ret
 b64:	12 16       	cp	r1, r18
 b66:	13 06       	cpc	r1, r19
 b68:	14 06       	cpc	r1, r20
 b6a:	55 1f       	adc	r21, r21
 b6c:	f2 cf       	rjmp	.-28     	; 0xb52 <__fp_split3+0xe>
 b6e:	46 95       	lsr	r20
 b70:	f1 df       	rcall	.-30     	; 0xb54 <__fp_splitA>
 b72:	08 c0       	rjmp	.+16     	; 0xb84 <__fp_splitA+0x30>
 b74:	16 16       	cp	r1, r22
 b76:	17 06       	cpc	r1, r23
 b78:	18 06       	cpc	r1, r24
 b7a:	99 1f       	adc	r25, r25
 b7c:	f1 cf       	rjmp	.-30     	; 0xb60 <__fp_splitA+0xc>
 b7e:	86 95       	lsr	r24
 b80:	71 05       	cpc	r23, r1
 b82:	61 05       	cpc	r22, r1
 b84:	08 94       	sec
 b86:	08 95       	ret

00000b88 <__fp_zero>:
 b88:	e8 94       	clt

00000b8a <__fp_szero>:
 b8a:	bb 27       	eor	r27, r27
 b8c:	66 27       	eor	r22, r22
 b8e:	77 27       	eor	r23, r23
 b90:	cb 01       	movw	r24, r22
 b92:	97 f9       	bld	r25, 7
 b94:	08 95       	ret

00000b96 <__gesf2>:
 b96:	0e 94 56 05 	call	0xaac	; 0xaac <__fp_cmp>
 b9a:	08 f4       	brcc	.+2      	; 0xb9e <__gesf2+0x8>
 b9c:	8f ef       	ldi	r24, 0xFF	; 255
 b9e:	08 95       	ret

00000ba0 <__mulsf3>:
 ba0:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__mulsf3x>
 ba4:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__fp_round>
 ba8:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_pscA>
 bac:	38 f0       	brcs	.+14     	; 0xbbc <__mulsf3+0x1c>
 bae:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fp_pscB>
 bb2:	20 f0       	brcs	.+8      	; 0xbbc <__mulsf3+0x1c>
 bb4:	95 23       	and	r25, r21
 bb6:	11 f0       	breq	.+4      	; 0xbbc <__mulsf3+0x1c>
 bb8:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__fp_inf>
 bbc:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__fp_nan>
 bc0:	11 24       	eor	r1, r1
 bc2:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_szero>

00000bc6 <__mulsf3x>:
 bc6:	0e 94 a2 05 	call	0xb44	; 0xb44 <__fp_split3>
 bca:	70 f3       	brcs	.-36     	; 0xba8 <__mulsf3+0x8>

00000bcc <__mulsf3_pse>:
 bcc:	95 9f       	mul	r25, r21
 bce:	c1 f3       	breq	.-16     	; 0xbc0 <__mulsf3+0x20>
 bd0:	95 0f       	add	r25, r21
 bd2:	50 e0       	ldi	r21, 0x00	; 0
 bd4:	55 1f       	adc	r21, r21
 bd6:	62 9f       	mul	r22, r18
 bd8:	f0 01       	movw	r30, r0
 bda:	72 9f       	mul	r23, r18
 bdc:	bb 27       	eor	r27, r27
 bde:	f0 0d       	add	r31, r0
 be0:	b1 1d       	adc	r27, r1
 be2:	63 9f       	mul	r22, r19
 be4:	aa 27       	eor	r26, r26
 be6:	f0 0d       	add	r31, r0
 be8:	b1 1d       	adc	r27, r1
 bea:	aa 1f       	adc	r26, r26
 bec:	64 9f       	mul	r22, r20
 bee:	66 27       	eor	r22, r22
 bf0:	b0 0d       	add	r27, r0
 bf2:	a1 1d       	adc	r26, r1
 bf4:	66 1f       	adc	r22, r22
 bf6:	82 9f       	mul	r24, r18
 bf8:	22 27       	eor	r18, r18
 bfa:	b0 0d       	add	r27, r0
 bfc:	a1 1d       	adc	r26, r1
 bfe:	62 1f       	adc	r22, r18
 c00:	73 9f       	mul	r23, r19
 c02:	b0 0d       	add	r27, r0
 c04:	a1 1d       	adc	r26, r1
 c06:	62 1f       	adc	r22, r18
 c08:	83 9f       	mul	r24, r19
 c0a:	a0 0d       	add	r26, r0
 c0c:	61 1d       	adc	r22, r1
 c0e:	22 1f       	adc	r18, r18
 c10:	74 9f       	mul	r23, r20
 c12:	33 27       	eor	r19, r19
 c14:	a0 0d       	add	r26, r0
 c16:	61 1d       	adc	r22, r1
 c18:	23 1f       	adc	r18, r19
 c1a:	84 9f       	mul	r24, r20
 c1c:	60 0d       	add	r22, r0
 c1e:	21 1d       	adc	r18, r1
 c20:	82 2f       	mov	r24, r18
 c22:	76 2f       	mov	r23, r22
 c24:	6a 2f       	mov	r22, r26
 c26:	11 24       	eor	r1, r1
 c28:	9f 57       	subi	r25, 0x7F	; 127
 c2a:	50 40       	sbci	r21, 0x00	; 0
 c2c:	9a f0       	brmi	.+38     	; 0xc54 <__mulsf3_pse+0x88>
 c2e:	f1 f0       	breq	.+60     	; 0xc6c <__mulsf3_pse+0xa0>
 c30:	88 23       	and	r24, r24
 c32:	4a f0       	brmi	.+18     	; 0xc46 <__mulsf3_pse+0x7a>
 c34:	ee 0f       	add	r30, r30
 c36:	ff 1f       	adc	r31, r31
 c38:	bb 1f       	adc	r27, r27
 c3a:	66 1f       	adc	r22, r22
 c3c:	77 1f       	adc	r23, r23
 c3e:	88 1f       	adc	r24, r24
 c40:	91 50       	subi	r25, 0x01	; 1
 c42:	50 40       	sbci	r21, 0x00	; 0
 c44:	a9 f7       	brne	.-22     	; 0xc30 <__mulsf3_pse+0x64>
 c46:	9e 3f       	cpi	r25, 0xFE	; 254
 c48:	51 05       	cpc	r21, r1
 c4a:	80 f0       	brcs	.+32     	; 0xc6c <__mulsf3_pse+0xa0>
 c4c:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__fp_inf>
 c50:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_szero>
 c54:	5f 3f       	cpi	r21, 0xFF	; 255
 c56:	e4 f3       	brlt	.-8      	; 0xc50 <__mulsf3_pse+0x84>
 c58:	98 3e       	cpi	r25, 0xE8	; 232
 c5a:	d4 f3       	brlt	.-12     	; 0xc50 <__mulsf3_pse+0x84>
 c5c:	86 95       	lsr	r24
 c5e:	77 95       	ror	r23
 c60:	67 95       	ror	r22
 c62:	b7 95       	ror	r27
 c64:	f7 95       	ror	r31
 c66:	e7 95       	ror	r30
 c68:	9f 5f       	subi	r25, 0xFF	; 255
 c6a:	c1 f7       	brne	.-16     	; 0xc5c <__mulsf3_pse+0x90>
 c6c:	fe 2b       	or	r31, r30
 c6e:	88 0f       	add	r24, r24
 c70:	91 1d       	adc	r25, r1
 c72:	96 95       	lsr	r25
 c74:	87 95       	ror	r24
 c76:	97 f9       	bld	r25, 7
 c78:	08 95       	ret

00000c7a <__divmodsi4>:
 c7a:	05 2e       	mov	r0, r21
 c7c:	97 fb       	bst	r25, 7
 c7e:	1e f4       	brtc	.+6      	; 0xc86 <__divmodsi4+0xc>
 c80:	00 94       	com	r0
 c82:	0e 94 54 06 	call	0xca8	; 0xca8 <__negsi2>
 c86:	57 fd       	sbrc	r21, 7
 c88:	07 d0       	rcall	.+14     	; 0xc98 <__divmodsi4_neg2>
 c8a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__udivmodsi4>
 c8e:	07 fc       	sbrc	r0, 7
 c90:	03 d0       	rcall	.+6      	; 0xc98 <__divmodsi4_neg2>
 c92:	4e f4       	brtc	.+18     	; 0xca6 <__divmodsi4_exit>
 c94:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__negsi2>

00000c98 <__divmodsi4_neg2>:
 c98:	50 95       	com	r21
 c9a:	40 95       	com	r20
 c9c:	30 95       	com	r19
 c9e:	21 95       	neg	r18
 ca0:	3f 4f       	sbci	r19, 0xFF	; 255
 ca2:	4f 4f       	sbci	r20, 0xFF	; 255
 ca4:	5f 4f       	sbci	r21, 0xFF	; 255

00000ca6 <__divmodsi4_exit>:
 ca6:	08 95       	ret

00000ca8 <__negsi2>:
 ca8:	90 95       	com	r25
 caa:	80 95       	com	r24
 cac:	70 95       	com	r23
 cae:	61 95       	neg	r22
 cb0:	7f 4f       	sbci	r23, 0xFF	; 255
 cb2:	8f 4f       	sbci	r24, 0xFF	; 255
 cb4:	9f 4f       	sbci	r25, 0xFF	; 255
 cb6:	08 95       	ret

00000cb8 <__udivmodsi4>:
 cb8:	a1 e2       	ldi	r26, 0x21	; 33
 cba:	1a 2e       	mov	r1, r26
 cbc:	aa 1b       	sub	r26, r26
 cbe:	bb 1b       	sub	r27, r27
 cc0:	fd 01       	movw	r30, r26
 cc2:	0d c0       	rjmp	.+26     	; 0xcde <__udivmodsi4_ep>

00000cc4 <__udivmodsi4_loop>:
 cc4:	aa 1f       	adc	r26, r26
 cc6:	bb 1f       	adc	r27, r27
 cc8:	ee 1f       	adc	r30, r30
 cca:	ff 1f       	adc	r31, r31
 ccc:	a2 17       	cp	r26, r18
 cce:	b3 07       	cpc	r27, r19
 cd0:	e4 07       	cpc	r30, r20
 cd2:	f5 07       	cpc	r31, r21
 cd4:	20 f0       	brcs	.+8      	; 0xcde <__udivmodsi4_ep>
 cd6:	a2 1b       	sub	r26, r18
 cd8:	b3 0b       	sbc	r27, r19
 cda:	e4 0b       	sbc	r30, r20
 cdc:	f5 0b       	sbc	r31, r21

00000cde <__udivmodsi4_ep>:
 cde:	66 1f       	adc	r22, r22
 ce0:	77 1f       	adc	r23, r23
 ce2:	88 1f       	adc	r24, r24
 ce4:	99 1f       	adc	r25, r25
 ce6:	1a 94       	dec	r1
 ce8:	69 f7       	brne	.-38     	; 0xcc4 <__udivmodsi4_loop>
 cea:	60 95       	com	r22
 cec:	70 95       	com	r23
 cee:	80 95       	com	r24
 cf0:	90 95       	com	r25
 cf2:	9b 01       	movw	r18, r22
 cf4:	ac 01       	movw	r20, r24
 cf6:	bd 01       	movw	r22, r26
 cf8:	cf 01       	movw	r24, r30
 cfa:	08 95       	ret

00000cfc <_exit>:
 cfc:	f8 94       	cli

00000cfe <__stop_program>:
 cfe:	ff cf       	rjmp	.-2      	; 0xcfe <__stop_program>
